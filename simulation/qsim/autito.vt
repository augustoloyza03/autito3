// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2024 22:57:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    doblar2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module doblar2_vlg_sample_tst(
	clk,
	dd,
	df,
	di,
	reset,
	sampler_tx
);
input  clk;
input [11:0] dd;
input  df;
input [11:0] di;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dd or df or di or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module doblar2_vlg_check_tst (
	Envio0,
	Envio1,
	ledcheckdd,
	ledcheckdf,
	ledcheckdi,
	ledcheckm0d,
	ledcheckm0i,
	ledcheckm1d,
	ledcheckm1i,
	M0D,
	M0I,
	M1D,
	M1I,
	velmd,
	velmi,
	sampler_rx
);
input  Envio0;
input  Envio1;
input  ledcheckdd;
input  ledcheckdf;
input  ledcheckdi;
input  ledcheckm0d;
input  ledcheckm0i;
input  ledcheckm1d;
input  ledcheckm1i;
input  M0D;
input  M0I;
input  M1D;
input  M1I;
input  velmd;
input  velmi;
input sampler_rx;

reg  Envio0_expected;
reg  Envio1_expected;
reg  ledcheckdd_expected;
reg  ledcheckdf_expected;
reg  ledcheckdi_expected;
reg  ledcheckm0d_expected;
reg  ledcheckm0i_expected;
reg  ledcheckm1d_expected;
reg  ledcheckm1i_expected;
reg  M0D_expected;
reg  M0I_expected;
reg  M1D_expected;
reg  M1I_expected;
reg  velmd_expected;
reg  velmi_expected;

reg  Envio0_prev;
reg  Envio1_prev;
reg  ledcheckdd_prev;
reg  ledcheckdf_prev;
reg  ledcheckdi_prev;
reg  ledcheckm0d_prev;
reg  ledcheckm0i_prev;
reg  ledcheckm1d_prev;
reg  ledcheckm1i_prev;
reg  M0D_prev;
reg  M0I_prev;
reg  M1D_prev;
reg  M1I_prev;
reg  velmd_prev;
reg  velmi_prev;

reg  Envio0_expected_prev;
reg  Envio1_expected_prev;
reg  ledcheckdd_expected_prev;
reg  ledcheckdf_expected_prev;
reg  ledcheckdi_expected_prev;
reg  ledcheckm0d_expected_prev;
reg  ledcheckm0i_expected_prev;
reg  ledcheckm1d_expected_prev;
reg  ledcheckm1i_expected_prev;
reg  M0D_expected_prev;
reg  M0I_expected_prev;
reg  M1D_expected_prev;
reg  M1I_expected_prev;
reg  velmd_expected_prev;
reg  velmi_expected_prev;

reg  last_Envio0_exp;
reg  last_Envio1_exp;
reg  last_ledcheckdd_exp;
reg  last_ledcheckdf_exp;
reg  last_ledcheckdi_exp;
reg  last_ledcheckm0d_exp;
reg  last_ledcheckm0i_exp;
reg  last_ledcheckm1d_exp;
reg  last_ledcheckm1i_exp;
reg  last_M0D_exp;
reg  last_M0I_exp;
reg  last_M1D_exp;
reg  last_M1I_exp;
reg  last_velmd_exp;
reg  last_velmi_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	Envio0_prev = Envio0;
	Envio1_prev = Envio1;
	ledcheckdd_prev = ledcheckdd;
	ledcheckdf_prev = ledcheckdf;
	ledcheckdi_prev = ledcheckdi;
	ledcheckm0d_prev = ledcheckm0d;
	ledcheckm0i_prev = ledcheckm0i;
	ledcheckm1d_prev = ledcheckm1d;
	ledcheckm1i_prev = ledcheckm1i;
	M0D_prev = M0D;
	M0I_prev = M0I;
	M1D_prev = M1D;
	M1I_prev = M1I;
	velmd_prev = velmd;
	velmi_prev = velmi;
end

// update expected /o prevs

always @(trigger)
begin
	Envio0_expected_prev = Envio0_expected;
	Envio1_expected_prev = Envio1_expected;
	ledcheckdd_expected_prev = ledcheckdd_expected;
	ledcheckdf_expected_prev = ledcheckdf_expected;
	ledcheckdi_expected_prev = ledcheckdi_expected;
	ledcheckm0d_expected_prev = ledcheckm0d_expected;
	ledcheckm0i_expected_prev = ledcheckm0i_expected;
	ledcheckm1d_expected_prev = ledcheckm1d_expected;
	ledcheckm1i_expected_prev = ledcheckm1i_expected;
	M0D_expected_prev = M0D_expected;
	M0I_expected_prev = M0I_expected;
	M1D_expected_prev = M1D_expected;
	M1I_expected_prev = M1I_expected;
	velmd_expected_prev = velmd_expected;
	velmi_expected_prev = velmi_expected;
end



// expected Envio0
initial
begin
	Envio0_expected = 1'bX;
end 

// expected Envio1
initial
begin
	Envio1_expected = 1'bX;
end 

// expected ledcheckdd
initial
begin
	ledcheckdd_expected = 1'bX;
end 

// expected ledcheckdf
initial
begin
	ledcheckdf_expected = 1'bX;
end 

// expected ledcheckdi
initial
begin
	ledcheckdi_expected = 1'bX;
end 

// expected ledcheckm0d
initial
begin
	ledcheckm0d_expected = 1'bX;
end 

// expected ledcheckm0i
initial
begin
	ledcheckm0i_expected = 1'bX;
end 

// expected ledcheckm1d
initial
begin
	ledcheckm1d_expected = 1'bX;
end 

// expected ledcheckm1i
initial
begin
	ledcheckm1i_expected = 1'bX;
end 

// expected M0D
initial
begin
	M0D_expected = 1'bX;
end 

// expected M1D
initial
begin
	M1D_expected = 1'bX;
end 

// expected M0I
initial
begin
	M0I_expected = 1'bX;
end 

// expected M1I
initial
begin
	M1I_expected = 1'bX;
end 

// expected velmd
initial
begin
	velmd_expected = 1'bX;
end 

// expected velmi
initial
begin
	velmi_expected = 1'bX;
end 
// generate trigger
always @(Envio0_expected or Envio0 or Envio1_expected or Envio1 or ledcheckdd_expected or ledcheckdd or ledcheckdf_expected or ledcheckdf or ledcheckdi_expected or ledcheckdi or ledcheckm0d_expected or ledcheckm0d or ledcheckm0i_expected or ledcheckm0i or ledcheckm1d_expected or ledcheckm1d or ledcheckm1i_expected or ledcheckm1i or M0D_expected or M0D or M0I_expected or M0I or M1D_expected or M1D or M1I_expected or M1I or velmd_expected or velmd or velmi_expected or velmi)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Envio0 = %b | expected Envio1 = %b | expected ledcheckdd = %b | expected ledcheckdf = %b | expected ledcheckdi = %b | expected ledcheckm0d = %b | expected ledcheckm0i = %b | expected ledcheckm1d = %b | expected ledcheckm1i = %b | expected M0D = %b | expected M0I = %b | expected M1D = %b | expected M1I = %b | expected velmd = %b | expected velmi = %b | ",Envio0_expected_prev,Envio1_expected_prev,ledcheckdd_expected_prev,ledcheckdf_expected_prev,ledcheckdi_expected_prev,ledcheckm0d_expected_prev,ledcheckm0i_expected_prev,ledcheckm1d_expected_prev,ledcheckm1i_expected_prev,M0D_expected_prev,M0I_expected_prev,M1D_expected_prev,M1I_expected_prev,velmd_expected_prev,velmi_expected_prev);
	$display("| real Envio0 = %b | real Envio1 = %b | real ledcheckdd = %b | real ledcheckdf = %b | real ledcheckdi = %b | real ledcheckm0d = %b | real ledcheckm0i = %b | real ledcheckm1d = %b | real ledcheckm1i = %b | real M0D = %b | real M0I = %b | real M1D = %b | real M1I = %b | real velmd = %b | real velmi = %b | ",Envio0_prev,Envio1_prev,ledcheckdd_prev,ledcheckdf_prev,ledcheckdi_prev,ledcheckm0d_prev,ledcheckm0i_prev,ledcheckm1d_prev,ledcheckm1i_prev,M0D_prev,M0I_prev,M1D_prev,M1I_prev,velmd_prev,velmi_prev);
`endif
	if (
		( Envio0_expected_prev !== 1'bx ) && ( Envio0_prev !== Envio0_expected_prev )
		&& ((Envio0_expected_prev !== last_Envio0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Envio0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Envio0_expected_prev);
		$display ("     Real value = %b", Envio0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Envio0_exp = Envio0_expected_prev;
	end
	if (
		( Envio1_expected_prev !== 1'bx ) && ( Envio1_prev !== Envio1_expected_prev )
		&& ((Envio1_expected_prev !== last_Envio1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Envio1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Envio1_expected_prev);
		$display ("     Real value = %b", Envio1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Envio1_exp = Envio1_expected_prev;
	end
	if (
		( ledcheckdd_expected_prev !== 1'bx ) && ( ledcheckdd_prev !== ledcheckdd_expected_prev )
		&& ((ledcheckdd_expected_prev !== last_ledcheckdd_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckdd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckdd_expected_prev);
		$display ("     Real value = %b", ledcheckdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledcheckdd_exp = ledcheckdd_expected_prev;
	end
	if (
		( ledcheckdf_expected_prev !== 1'bx ) && ( ledcheckdf_prev !== ledcheckdf_expected_prev )
		&& ((ledcheckdf_expected_prev !== last_ledcheckdf_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckdf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckdf_expected_prev);
		$display ("     Real value = %b", ledcheckdf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ledcheckdf_exp = ledcheckdf_expected_prev;
	end
	if (
		( ledcheckdi_expected_prev !== 1'bx ) && ( ledcheckdi_prev !== ledcheckdi_expected_prev )
		&& ((ledcheckdi_expected_prev !== last_ledcheckdi_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckdi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckdi_expected_prev);
		$display ("     Real value = %b", ledcheckdi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ledcheckdi_exp = ledcheckdi_expected_prev;
	end
	if (
		( ledcheckm0d_expected_prev !== 1'bx ) && ( ledcheckm0d_prev !== ledcheckm0d_expected_prev )
		&& ((ledcheckm0d_expected_prev !== last_ledcheckm0d_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckm0d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckm0d_expected_prev);
		$display ("     Real value = %b", ledcheckm0d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ledcheckm0d_exp = ledcheckm0d_expected_prev;
	end
	if (
		( ledcheckm0i_expected_prev !== 1'bx ) && ( ledcheckm0i_prev !== ledcheckm0i_expected_prev )
		&& ((ledcheckm0i_expected_prev !== last_ledcheckm0i_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckm0i :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckm0i_expected_prev);
		$display ("     Real value = %b", ledcheckm0i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ledcheckm0i_exp = ledcheckm0i_expected_prev;
	end
	if (
		( ledcheckm1d_expected_prev !== 1'bx ) && ( ledcheckm1d_prev !== ledcheckm1d_expected_prev )
		&& ((ledcheckm1d_expected_prev !== last_ledcheckm1d_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckm1d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckm1d_expected_prev);
		$display ("     Real value = %b", ledcheckm1d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledcheckm1d_exp = ledcheckm1d_expected_prev;
	end
	if (
		( ledcheckm1i_expected_prev !== 1'bx ) && ( ledcheckm1i_prev !== ledcheckm1i_expected_prev )
		&& ((ledcheckm1i_expected_prev !== last_ledcheckm1i_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledcheckm1i :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledcheckm1i_expected_prev);
		$display ("     Real value = %b", ledcheckm1i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ledcheckm1i_exp = ledcheckm1i_expected_prev;
	end
	if (
		( M0D_expected_prev !== 1'bx ) && ( M0D_prev !== M0D_expected_prev )
		&& ((M0D_expected_prev !== last_M0D_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M0D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M0D_expected_prev);
		$display ("     Real value = %b", M0D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M0D_exp = M0D_expected_prev;
	end
	if (
		( M0I_expected_prev !== 1'bx ) && ( M0I_prev !== M0I_expected_prev )
		&& ((M0I_expected_prev !== last_M0I_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M0I :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M0I_expected_prev);
		$display ("     Real value = %b", M0I_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_M0I_exp = M0I_expected_prev;
	end
	if (
		( M1D_expected_prev !== 1'bx ) && ( M1D_prev !== M1D_expected_prev )
		&& ((M1D_expected_prev !== last_M1D_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M1D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M1D_expected_prev);
		$display ("     Real value = %b", M1D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_M1D_exp = M1D_expected_prev;
	end
	if (
		( M1I_expected_prev !== 1'bx ) && ( M1I_prev !== M1I_expected_prev )
		&& ((M1I_expected_prev !== last_M1I_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M1I :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M1I_expected_prev);
		$display ("     Real value = %b", M1I_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_M1I_exp = M1I_expected_prev;
	end
	if (
		( velmd_expected_prev !== 1'bx ) && ( velmd_prev !== velmd_expected_prev )
		&& ((velmd_expected_prev !== last_velmd_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velmd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velmd_expected_prev);
		$display ("     Real value = %b", velmd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_velmd_exp = velmd_expected_prev;
	end
	if (
		( velmi_expected_prev !== 1'bx ) && ( velmi_prev !== velmi_expected_prev )
		&& ((velmi_expected_prev !== last_velmi_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velmi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velmi_expected_prev);
		$display ("     Real value = %b", velmi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_velmi_exp = velmi_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module doblar2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [11:0] dd;
reg df;
reg [11:0] di;
reg reset;
// wires                                               
wire Envio0;
wire Envio1;
wire ledcheckdd;
wire ledcheckdf;
wire ledcheckdi;
wire ledcheckm0d;
wire ledcheckm0i;
wire ledcheckm1d;
wire ledcheckm1i;
wire M0D;
wire M0I;
wire M1D;
wire M1I;
wire velmd;
wire velmi;

wire sampler;                             

// assign statements (if any)                          
doblar2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dd(dd),
	.df(df),
	.di(di),
	.Envio0(Envio0),
	.Envio1(Envio1),
	.ledcheckdd(ledcheckdd),
	.ledcheckdf(ledcheckdf),
	.ledcheckdi(ledcheckdi),
	.ledcheckm0d(ledcheckm0d),
	.ledcheckm0i(ledcheckm0i),
	.ledcheckm1d(ledcheckm1d),
	.ledcheckm1i(ledcheckm1i),
	.M0D(M0D),
	.M0I(M0I),
	.M1D(M1D),
	.M1I(M1I),
	.reset(reset),
	.velmd(velmd),
	.velmi(velmi)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// dd[ 11 ]
initial
begin
	dd[11] = 1'b0;
end 
// dd[ 10 ]
initial
begin
	dd[10] = 1'b0;
end 
// dd[ 9 ]
initial
begin
	dd[9] = 1'b0;
end 
// dd[ 8 ]
initial
begin
	dd[8] = 1'b0;
end 
// dd[ 7 ]
initial
begin
	dd[7] = 1'b0;
end 
// dd[ 6 ]
initial
begin
	dd[6] = 1'b0;
end 
// dd[ 5 ]
initial
begin
	dd[5] = 1'b0;
end 
// dd[ 4 ]
initial
begin
	dd[4] = 1'b0;
end 
// dd[ 3 ]
initial
begin
	dd[3] = 1'b0;
end 
// dd[ 2 ]
initial
begin
	dd[2] = 1'b0;
end 
// dd[ 1 ]
initial
begin
	dd[1] = 1'b0;
end 
// dd[ 0 ]
initial
begin
	dd[0] = 1'b0;
end 
// di[ 11 ]
initial
begin
	di[11] = 1'b1;
end 
// di[ 10 ]
initial
begin
	di[10] = 1'b1;
end 
// di[ 9 ]
initial
begin
	di[9] = 1'b1;
end 
// di[ 8 ]
initial
begin
	di[8] = 1'b1;
end 
// di[ 7 ]
initial
begin
	di[7] = 1'b1;
end 
// di[ 6 ]
initial
begin
	di[6] = 1'b1;
end 
// di[ 5 ]
initial
begin
	di[5] = 1'b1;
end 
// di[ 4 ]
initial
begin
	di[4] = 1'b1;
end 
// di[ 3 ]
initial
begin
	di[3] = 1'b1;
end 
// di[ 2 ]
initial
begin
	di[2] = 1'b1;
end 
// di[ 1 ]
initial
begin
	di[1] = 1'b1;
end 
// di[ 0 ]
initial
begin
	di[0] = 1'b1;
end 

// df
initial
begin
	df = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
end 

doblar2_vlg_sample_tst tb_sample (
	.clk(clk),
	.dd(dd),
	.df(df),
	.di(di),
	.reset(reset),
	.sampler_tx(sampler)
);

doblar2_vlg_check_tst tb_out(
	.Envio0(Envio0),
	.Envio1(Envio1),
	.ledcheckdd(ledcheckdd),
	.ledcheckdf(ledcheckdf),
	.ledcheckdi(ledcheckdi),
	.ledcheckm0d(ledcheckm0d),
	.ledcheckm0i(ledcheckm0i),
	.ledcheckm1d(ledcheckm1d),
	.ledcheckm1i(ledcheckm1i),
	.M0D(M0D),
	.M0I(M0I),
	.M1D(M1D),
	.M1I(M1I),
	.velmd(velmd),
	.velmi(velmi),
	.sampler_rx(sampler)
);
endmodule

